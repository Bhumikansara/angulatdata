{"version":3,"sources":["ng://nz-form-builder/lib/form-builder.service.ts","ng://nz-form-builder/lib/form-builder.component.ts","ng://nz-form-builder/lib/form-builder.module.ts"],"names":["FormBuilderService","Injectable","args","providedIn","FormBuilderComponent","fb","this","formValues","EventEmitter","checkboxArr","prototype","ngOnInit","createDynamicForm","dynamicForm","group","valueChanges","subscribe","value","initializeDynamicForm","journey","dataToUpdate","setFormFields","_this","fieldConfig","forEach","row","required","pattern","addControl","name","FormControl","disabled","Validators","markFormGroupTouched","formGroup","values","controls","control","markAsTouched","onCancel","Object","keys","i","patchValue","toggleSelect","event","option","field","actualArr","some","el","key","index","map","indexOf","splice","push","isChecked","setValue","get","element","type","selectedOptions","totalOptions","options","r","length","onFileSelected","filesSelected","target","files","onDSubmit","emit","mailTo","window","open","url","Component","selector","template","FormBuilder","Input","Output","FormBuilderModule","NgModule","declarations","imports","FormsModule","ReactiveFormsModule","CommonModule","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FormBuilderService {\n\n  constructor() { }\n}\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\n// import { NgbDatepickerConfig, NgbCalendar, NgbDate, NgbDateStruct } from '@ng-bootstrap/ng-bootstrap';\n\n@Component({\n  selector: 'nz-form-builder',\n  templateUrl: './form-builder.component.html',\n  styleUrls: ['./form-builder.component.scss']\n})\nexport class FormBuilderComponent implements OnInit {\n\n  @Input() fieldConfig: any;\n  @Input() formConfig: any;\n  @Input() journey: string;\n  @Input() dataToUpdate: any;\n\n  @Output() formValues: any = new EventEmitter()\n\n  checkboxArr = [];\n  filesSelected: any;\n  dynamicForm: FormGroup;\n\n  constructor(\n    private fb: FormBuilder,\n  ) { }\n\n  ngOnInit() {\n    this.createDynamicForm();\n  }\n\n  /**\n   * Create Form Group\n   */\n  createDynamicForm() {\n    this.dynamicForm = this.fb.group({}),\n      this.dynamicForm.valueChanges.subscribe((value) => {\n      })\n    this.initializeDynamicForm();\n    // dummy data to test\n    const valuesDyn = {\n      \"firstname\": \"nizam123\",\n      \"lastname\": \"shaik456\",\n      \"class\": \"8\",\n      \"age\": \"30\",\n      \"dateofbirth\": \"1994-12-05\",\n      \"gender\": \"female\",\n      \"state\": [\n        {\n          \"key\": \"Nellore\",\n          \"value\": \"nellore\",\n          \"isChecked\": true\n        }\n      ],\n      \"address\": \"buchi reddy palem\",\n      \"file\": {\n        \"0\": {}\n      }\n    }\n    if (this.journey === 'update' && this.dataToUpdate){\n      this.setFormFields(this.dataToUpdate);\n    }\n      \n  }\n\n  /**\n   * Initialize the form with all validations and patterns\n   */\n  initializeDynamicForm() {\n    this.fieldConfig.forEach((row) => {\n      if (row.required === true && row.pattern != '') {\n        this.dynamicForm.addControl(row.name, new FormControl({ value: '', disabled: row.disabled }, [Validators.required, Validators.pattern(row.pattern)]));\n      } else if (row.pattern != '') {\n        this.dynamicForm.addControl(row.name, new FormControl({ value: '', disabled: row.disabled }, [Validators.pattern(row.pattern)]));\n      } else if (row.required === true) {\n        this.dynamicForm.addControl(row.name, new FormControl({ value: '', disabled: row.disabled }, [Validators.required]));\n      } else {\n        this.dynamicForm.addControl(row.name, new FormControl({ value: '', disabled: row.disabled }));\n      }\n    });\n  }\n\n  /**\n   * For Validations , This marks all fields as touched on click of submit\n   */\n  private markFormGroupTouched(formGroup: FormGroup) {\n    (<any>Object).values(formGroup.controls).forEach(control => {\n      control.markAsTouched();\n      if (control.controls) {\n        this.markFormGroupTouched(control);\n      }\n    });\n  }\n\n  onCancel() {\n    // reset the form\n    Object.keys(this.dynamicForm.controls).forEach((name, i) => {\n      this.dynamicForm.controls[name].patchValue('');\n    })\n  }\n\n  /**\n   * Checkbox logic\n   */\n  toggleSelect(event, option, field, actualArr) {\n\n    const found = this.checkboxArr.some((el) => {\n      return el.key === option.key;\n    });\n    if (!found) {\n      this.checkboxArr.push({ key: option.key, value: option.value, isChecked: true });\n    } else {\n      const index = this.checkboxArr.map((row) => { return row.key; }).indexOf(option.key);\n      this.checkboxArr.splice(index, 1);\n    }\n    this.dynamicForm.controls[field.name].setValue(this.checkboxArr);\n  }\n\n  /**\n   * The below logic for edit Journey\n   * @param values => will be the form values to patch in form\n   */\n\n  setFormFields(values) {\n    this.checkboxArr = [];\n    Object.keys(values).forEach((name) => {\n      if (this.dynamicForm.get(name)) {\n        this.dynamicForm.controls[name].patchValue(values[name]);\n      }\n    })\n\n    // If checkbox exist in field Config , the below block activates and map the values to checkbox\n    this.fieldConfig.forEach(element => {\n      if (element.type === 'checkbox') {\n\n        const selectedOptions = this.dynamicForm.get(element.name).value;\n        const totalOptions: any = element.options;\n        this.checkboxArr = selectedOptions;\n\n        totalOptions.forEach((r) => { r.isChecked = false; })\n\n        for (let i = 0; i < selectedOptions.length; i++) {\n          const index = totalOptions.map((row) => { return row.value; }).indexOf(selectedOptions[i].value);\n          totalOptions[index].isChecked = true;\n        }\n      }\n    });\n  }\n\n  /**\n   * For Input type File\n   */\n  onFileSelected(event, field) {\n    this.filesSelected = event.target.files;\n    this.dynamicForm.controls[field.name].setValue(event.target.files);\n  }\n\n  /**\n   * On Submit form\n   */\n  onDSubmit(dynamicForm) {\n    this.markFormGroupTouched(this.dynamicForm);\n    this.formValues.emit(this.dynamicForm);\n  }\n\n  // Branding\n  mailTo() {\n    let url;\n    url = 'mailto:' + 'nizamuddin407@gmail.com';\n    url += '?subject=' + 'Dynamic form builder';\n    url += '&body=' + '';\n    window.open(url, '', '\"width=200,height=100\"');\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { FormBuilderComponent } from './form-builder.component';\nimport { FormsModule } from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\n\n@NgModule({\n  declarations: [FormBuilderComponent],\n  imports: [\n    FormsModule,\n    ReactiveFormsModule,\n    CommonModule,\n  ],\n  exports: [FormBuilderComponent]\n})\nexport class FormBuilderModule { }\n"]}