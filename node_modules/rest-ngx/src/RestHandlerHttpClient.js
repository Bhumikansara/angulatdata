var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { RestRequestMethod, RestResponseBodyType } from 'rest-core';
import { Injectable } from '@angular/core';
import { HttpClient, HttpEventType, HttpHeaders, HttpParams, HttpRequest } from '@angular/common/http';
import { RestHandlerAbstract } from './RestHandlerAbstract';
import 'rxjs/add/operator/filter';
var RestHandlerHttpClient = /** @class */ (function (_super) {
    __extends(RestHandlerHttpClient, _super);
    function RestHandlerHttpClient(http) {
        var _this = _super.call(this) || this;
        _this.http = http;
        return _this;
    }
    RestHandlerHttpClient.prototype.request = function (request) {
        return this.http.request(request)
            .filter(function (resp) { return resp.type === HttpEventType.Response; });
    };
    RestHandlerHttpClient.prototype.prepareRequest = function (req) {
        var method = 'GET';
        switch (req.method) {
            case RestRequestMethod.Get:
                method = 'GET';
                break;
            case RestRequestMethod.Post:
                method = 'POST';
                break;
            case RestRequestMethod.Put:
                method = 'PUT';
                break;
            case RestRequestMethod.Delete:
                method = 'DELETE';
                break;
            case RestRequestMethod.Head:
                method = 'HEAD';
                break;
            case RestRequestMethod.Options:
                method = 'OPTIONS';
                break;
            case RestRequestMethod.Patch:
                method = 'PATCH';
        }
        var init = {
            withCredentials: req.withCredentials
        };
        switch (req.responseBodyType) {
            case RestResponseBodyType.Json:
                init.responseType = 'json';
                break;
            case RestResponseBodyType.ArrayBuffer:
                init.responseType = 'arraybuffer';
                break;
            case RestResponseBodyType.Blob:
                init.responseType = 'blob';
                break;
            default:
                init.responseType = 'text';
        }
        if (req.headers) {
            init.headers = new HttpHeaders(req.headers);
        }
        if (req.query) {
            init.params = new HttpParams();
            for (var key in req.query) {
                if (req.query.hasOwnProperty(key)) {
                    init.params = init.params.set(key, req.query[key]);
                }
            }
        }
        return new HttpRequest(method, req.url, req.body, init);
    };
    RestHandlerHttpClient.prototype.handleResponse = function (req, response) {
        var headers = {};
        var keys = response.headers.keys();
        keys.forEach(function (key) {
            headers[key] = response.headers.getAll(key);
        });
        return {
            status: response.status,
            body: response.body,
            headers: headers
        };
    };
    RestHandlerHttpClient.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    RestHandlerHttpClient.ctorParameters = function () { return [
        { type: HttpClient, },
    ]; };
    return RestHandlerHttpClient;
}(RestHandlerAbstract));
export { RestHandlerHttpClient };
